* spdlog 日志库
  spdlog 是一个只有头文件的快速的C++11日志库，输出格式使用 [[https://github.com/fmtlib/fmt][fmt]] 库，实现类似 python 的输出：
#+BEGIN_SRC C++
logger->info("Hello {} {} !!", "param1", 123.4);
#+END_SRC

** 例子
   通过一些例子来了解库的基本使用方法。

*** Basic example
#+BEGIN_SRC C++
#include <iostream>
#include "spdlog/spdlog.h"
// #include "spdlog/sinks/stdout_color_sinks.h" //support for stdout logging
// #include "spdlog/sinks/basic_file_sink.h" // support for basic file logging
// #include "spdlog/sinks/rotating_file_sink.h" // support for rotating file logging

int main(int, char* [])
{
    //Multithreaded console logger(with color support)
    auto console = spdlog::stdout_color_mt("console");
    console->info("Welcome to spdlog!") ;
    console->info("An info message example {}..", 1);

    try
    {
        // Create basic file logger (not rotated)
        auto my_logger = spdlog::basic_logger_mt("basic_logger", "logs/basic.txt");

        // create a file rotating logger with 5mb size max and 3 rotated files
        auto file_logger = spdlog::rotating_logger_mt("file_logger", "myfilename", 1024 * 1024 * 5, 3);
    }
    catch (const spdlog::spdlog_ex& ex)
    {
        std::cout << "Log initialization failed: " << ex.what() << std::endl;
    }
}
#+END_SRC
深度跟踪例子的调用路线：
#+BEGIN_COMMENT

#+BEGIN_SRC plantuml :file images/basic_example.png
:Main;
:spdlog::stdout_color_mt(string);
:ansicolor_stdout_sink<mutex>;
:ansicolor_sink<mutex>;
:base_sink;
:sink;
:register::instance();
:register_t::create();
:logger::info();
:log(level, msg);
if (Exception ?) then (yes)
 :ex.what();
else (no)
 :basic_logger_mt();
 :rotating_logger_mt();
endif
:Finish;
#+END_SRC

#+RESULTS:
#+END_COMMENT


[[file:images/basic_example.png]]

*** asynchronous logger with factory method
#+BEGIN_SRC C++
#include "spdlog/async.h" //support for async logging.
// #include "spdlog/sinks/basic_file_sink.h"

int main(int, char* [])
{
    try
    {
        auto async_file = spdlog::basic_logger_mt<spdlog::async_factory>("async_file_logger", "logs/async_log.txt");
       for (int i = 1; i < 101; ++i)
      {
         async_file->info("Async message #{}", i);
      }
       // Under VisualStudio, this must be called before main finishes to workaround a known VS issue
        spdlog::drop_all();
    }
    catch (const spdlog::spdlog_ex& ex)
    {
        std::cout << "Log initialization failed: " << ex.what() << std::endl;
    }
}
#+END_SRC

**** 异步日志解析

#+BEGIN_COMMENT
#+BEGIN_SRC plantuml :file images/async_log.png
:start;
:创建带互斥量的logger对象;
note right
    使用异步工厂模式(async_factorty)
end note
:调用异步工厂create方法创建logger对象;
note right
    注册到注册中心并初始化
    这里会创建为注册中心创建
    一个单线程的线程池，默认
    消息队列大小为 8192
end note
:使用info方法输出日志到日志文件中;
note right
    这里会对输出日志等级进行比较
    如果消息等级大于等于注册等级直接退出不输出
    继续判断消息等级大于等于 sink 的等级则输出
end note
:注销所有的logger对象;
:end;
#+END_SRC

#+RESULTS:
#+END_COMMENT

[[file:images/async_log.png]]

**** 总结
这里使用阻塞的异步日志，使用异步工厂模式创建 logger 对象。这里有个语法值得留意，
在调用工厂方法的时候在前面注明模板类型：
#+BEGIN_SRC c
//
// factory functions
//
template<typename Factory = default_factory>
inline std::shared_ptr<logger> basic_logger_mt(const std::string &logger_name, const filename_t &filename, bool truncate = false)
{
    return Factory::template create<sinks::basic_file_sink_mt>(logger_name, filename, truncate);
}
#+END_SRC

=T::template function<T>= 与 =T::function= 的区别：

- 前者只能用于模板方法，而后者除了普通方法，还可以应用到带默认模板的方法中，也就
  是说，后者不能出现模板具现化
- 相同的是都只能用于 =static= 方法，这和普通方法只能通过实例访问有关

举个简单例子：
#+BEGIN_SRC c
#include <iostream>

class A {
 public:
  ~A();
  template<typename T=A>
  static int f() {
    std::cout << "a" << std::endl;
    return 1;
  }
};

class B {
 public:
  ~B();
  template<typename T=B>
  static int f() {
    std::cout << "b" << std::endl;
    return 2;
  }
};

template<typename T>
int func() {
  return T::template f<T>();

 /*
,只要加上模板具现化就报错
,*/
  // return T::f();
}

int main() {
  std::cout << func<A>() << std::endl; 
  return 0;
}
#+END_SRC

* Table of Contens  :TOC:
- [[进程管理和调度][进程管理和调度]]
  - [[优先级][优先级]]
  - [[生命周期][生命周期]]
  - [[进程表示][进程表示]]

* 进程管理和调度
  内核和处理器多任务面临的问题：

  - 除非明确地要求，否则应用程序不能彼此干扰
  - CPU 时间必须在各种应用程序之间尽可能公平地共享
  - 内核必须决定为各个进程分配多长的时间，何时切换下一个进程
  - 保证切换后的进程的执行环境与上一次撤销处理器资源时完全相同
** 优先级
   除了进程优先级之外，还有不同的关键度类别，以满足不同需求。粗糙划分为实时和非实时进程。

   - 硬实时进程：严格的时间限制，必须在指定的时间内完成。Linux不支持实时处理，至少在主流的内核中不支持。修改版本如 RTLinux 支持，但内核只处理次要任务，实时工作在外部完成
   - 软实时进程：可以稍微延迟一点
   - 变通进程：根据重要性分配优先级
*** 调试器
    - 在2.5 系列中使用 O(1) 调度器代替了前一个调度器，可以在常数时间内完成其工件，不依赖进程数目
    - 2.6.23 合并完全公平调度器，试图尽可能地模仿理想情况下的公平调度
** 生命周期
   进程状态：

   - 运行
   - 就绪
   - 睡眠
   - 僵死
   - 终止
*** 抢占式多任务处理
- 普通进程总是可能被抢占
- 系统处于内核态并在处理系统调用，无法抢占
- 中断可以暂停处于用户态和内核态的进程，即最高优先级
- 2.5 添加了内核抢占，可以抢占系统调用(中断不可以)
** 进程表示
   Linux 内核相关算法都围绕 task_struct 的数据结构建立，定义于 =include/linux/sched.h= 中。
以最新发布的 4.20 版本源码为为例：

   - 状态和执行信息: 如待决信号，二进制格式、进程ID、父进程及其它进程的指针、优先级和程序执行有关的时间信息
   - 有关已结分配的虚拟内存的信息
   - 进程身份凭据：用户ID，组ID，以及权限等。
   - 使用的文件包含程序代码的二进制文件，以及进程所处理的所有文件的文件系统信息
   - 线程信息记录进程特定于CPU的运行时间数据
   - 进程间通信有关的信息
   - 信号处理程序: 用于响应的信号

Linux 资源限制： =include/uapi/linux/resource.h=
#+BEGIN_SRC C
struct rlimit {
	__kernel_ulong_t	rlim_cur;
	__kernel_ulong_t	rlim_max;
};

#define RLIM64_INFINITY		(~0ULL)

struct rlimit64 {
	__u64 rlim_cur;
	__u64 rlim_max;
};
#+END_SRC
- =rlim_cur= ：进程当前的资源限制，软限制
- =rlim_max= : 最在容许值，硬限制
- =setrlimit= : 增加当前限制
- =getrlimit= : 检查当前限制
*** 进程类型
    二进制代码应用程序、单线程、分配给应用程序的一组资源。
*** 命名空间
    [[file:img/Snipaste_2018-12-28_13-44-26.png]]
**** 实现
     需要两个部分：
     - 每个子系统的命名空间结构，将此前所有的全局组件包装到命名空间
     - 将给定进程关联到所属各个命名空间的机制

[[file:img/Snipaste_2018-12-28_14-00-51.png]]

每个可以感知命名空间的内核子系统都必须提供一个数据结构，将所有通过命名空间形式的对象集中起来
。 =struct nsproxy= 用于汇集指向特定于子系统的命名空间包装器的指针：
#+BEGIN_SRC C
// include/linux/nsproxy.h
struct nsproxy {
	atomic_t count;
	struct uts_namespace *uts_ns;
	struct ipc_namespace *ipc_ns;
	struct mnt_namespace *mnt_ns;
	struct pid_namespace *pid_ns_for_children;
	struct net 	     *net_ns;
	struct cgroup_namespace *cgroup_ns;
};
#+END_SRC
- uts_namespace : 运行内核的名称、版本、底层体系结构。UTS 全称 UNIX Timesharing System
- ipc_namespace : 与进程通信相关信息
- mnt_namespace : 已经装载的文件系统的视图
- pid_namespace : 进程ID信息
- net : 网络相关参数
- cgroup_namespace : Cgroup命名空间虚拟化进程的cgroup视图。参考：http://man7.org/linux/man-pages/man7/cgroup_namespaces.7.html

  fork 可以建立一个新的命名空间，必须提供必要的限制标志控制机制：
#+BEGIN_SRC C
// include/uapi/linux/sched.h
#define CLONE_NEWCGROUP		0x02000000	/* New cgroup namespace */
#define CLONE_NEWUTS		0x04000000	/* New utsname namespace */
#define CLONE_NEWIPC		0x08000000	/* New ipc namespace */
#define CLONE_NEWUSER		0x10000000	/* New user namespace */
#define CLONE_NEWPID		0x20000000	/* New pid namespace */
#define CLONE_NEWNET		0x40000000	/* New network namespace */
#+END_SRC

  每个进程都关联到自己的命名空间视图：
#+BEGIN_SRC C
struct task_struct {
...
struct nsproxy *nsproxy;
...
}
#+END_SRC
使用指针使得多个进程共享一组子命名空间，因此修改命名空间对所有共享的进程都是可见的。

=init_nsproxy= 定义了初始的全局命名空间：
#+BEGIN_SRC C
// kernel/nsproxy.c
struct nsproxy init_nsproxy = {
	.count			= ATOMIC_INIT(1),
	.uts_ns			= &init_uts_ns,
#if defined(CONFIG_POSIX_MQUEUE) || defined(CONFIG_SYSVIPC)
	.ipc_ns			= &init_ipc_ns,
#endif
	.mnt_ns			= NULL,
	.pid_ns_for_children	= &init_pid_ns,
#ifdef CONFIG_NET
	.net_ns			= &init_net,
#endif
#ifdef CONFIG_CGROUPS
	.cgroup_ns		= &init_cgroup_ns,
#endif
};
#+END_SRC
***** UTS 命名空间
#+BEGIN_SRC C
// include/linux/utsname.h
struct uts_namespace {
	struct kref kref;
	struct new_utsname name;
	struct user_namespace *user_ns;
	struct ucounts *ucounts;
	struct ns_common ns;
} __randomize_layout;
#+END_SRC

kref是用来跟踪 UTS 实例的引用计数。name 是UTS的属性信息，系统的名称、内核发布的版本、
机器名等：
#+BEGIN_SRC C
//include/uapi/linux/utsname.h
struct new_utsname {
	char sysname[__NEW_UTS_LEN + 1];  // 65
	char nodename[__NEW_UTS_LEN + 1];
	char release[__NEW_UTS_LEN + 1];
	char version[__NEW_UTS_LEN + 1];
	char machine[__NEW_UTS_LEN + 1];
	char domainname[__NEW_UTS_LEN + 1];
};
#+END_SRC
书中使用的是 2.6 的内核，这里给的是4.2的内核，一个明显的变化是将用户命名空间加入
到UTS 成员中。

结构体增加了 ns_common 成员，用于进程对命名空间的操作:
#+BEGIN_SRC C
// include/ns_common.h
struct ns_common {
	atomic_long_t stashed;  // 隐藏
	const struct proc_ns_operations *ops;
	unsigned int inum;      // 进程拥有的命名空间的计数吧
};

// include/linux/proc_ns.h
struct proc_ns_operations {
	const char *name;
	const char *real_ns_name;
	int type;
	struct ns_common *(*get)(struct task_struct *task);
	void (*put)(struct ns_common *ns);
	int (*install)(struct nsproxy *nsproxy, struct ns_common *ns);
	struct user_namespace *(*owner)(struct ns_common *ns);
	struct ns_common *(*get_parent)(struct ns_common *ns);
} __randomize_layout;
#+END_SRC

UTS 初始化：
#+BEGIN_SRC C
// init/version.c
struct uts_namespace init_uts_ns = {
	.kref = KREF_INIT(2),
	.name = {
		.sysname	= UTS_SYSNAME,
		.nodename	= UTS_NODENAME,
		.release	= UTS_RELEASE,
		.version	= UTS_VERSION,
		.machine	= UTS_MACHINE,
		.domainname	= UTS_DOMAINNAME,
	},
	.user_ns = &init_user_ns,
	.ns.inum = PROC_UTS_INIT_INO,
#ifdef CONFIG_UTS_NS
	.ns.ops = &utsns_operations,
#endif
};
#+END_SRC

内核通过 fork 指定 =CLONE_NEWUTS= 标志并调用 =copy_utsname= 函数创建新的 UTS 命名空间。
然后就可以读取或设置 UTS 的副本的属性值而不会影响父进程的UTS。
***** 用户空间
      4.2 版本的用户空间相比2.6 版本复杂了许多。user_namespace 用来隔离 user权限相关的
Linux 资源，包括 user IDs 和 group IDs、keys 和 capabiltties。
#+BEGIN_SRC C
// include/linux/user_namespace.h
struct user_namespace {
	struct uid_gid_map	uid_map;
	struct uid_gid_map	gid_map;
	struct uid_gid_map	projid_map;
	atomic_t		count;
	struct user_namespace	*parent;
	int			level;
	kuid_t			owner;  // 创建 user_namespace 的进程ID
	kgid_t			group;
	struct ns_common	ns;
	unsigned long		flags;

	/* Register of per-UID persistent keyrings for this namespace */
#ifdef CONFIG_PERSISTENT_KEYRINGS
	struct key		*persistent_keyring_register;
	struct rw_semaphore	persistent_keyring_register_sem;
#endif
	struct work_struct	work;
#ifdef CONFIG_SYSCTL
	struct ctl_table_set	set;
	struct ctl_table_header *sysctls;
#endif
	struct ucounts		*ucounts;
	int ucount_max[UCOUNT_COUNTS];
} __randomize_layout;

struct ucounts {
	struct hlist_node node;
	struct user_namespace *ns;
	kuid_t uid;
	int count;
	atomic_t ucount[UCOUNT_COUNTS];
};
#+END_SRC
****** ID 相关
       用于将父进程中的用户权限映射到子进程空间的映射。
细节参考：https://segmentfault.com/a/1190000006913195
#+BEGIN_SRC C
struct uid_gid_map { /* 64 bytes -- 1 cache line */
	u32 nr_extents;  // extent 的个数
	union {
		struct uid_gid_extent extent[UID_GID_MAP_MAX_BASE_EXTENTS];
		struct {
			struct uid_gid_extent *forward;
			struct uid_gid_extent *reverse;
		};
	};
};

struct uid_gid_extent {
	u32 first;
	u32 lower_first;
	u32 count;
};
#+END_SRC
*** 进程 id 号
    UNIX 进程会分配进程id号用于在其命名空间唯一标识，简称 PID。
**** 进程ID
     进程ID类型:
#+BEGIN_SRC C
// include/linux/pid.h
enum pid_type
{
	PIDTYPE_PID,
	PIDTYPE_TGID,
	PIDTYPE_PGID,
	PIDTYPE_SID,
	PIDTYPE_MAX,
};
#+END_SRC

- 线程组ID（TGIP）: 通过 clone 创建的线程的 task_struct 的 =group_leader= 成员指向组长的 task_struct 实例
- 通过 setpgrp 系统调用将独立进程合并成进程组，成员中 task_struct 中的 =task_group= 属性值是相同的，即进程组组长PID
- 会话由几个进程组合并而成，会话中的进程都有相同的会话ID，保存在 task_struct 的 =sessionid= 成员中, 通过 setsid 系统调用设置

  命名空间带给PID管理的复杂性，所以必须区分局部ID和全局ID。
- 全局ID：内核本身和初始命名空间中的唯一ID号，每个ID类型都有一个给定的全局ID，保证在整个系统中的唯一性
- 局部ID：某个特定的命名空间，不具备全局有效性

全局PID和TGID直接保存在 task_struct中：
#+BEGIN_SRC C
struct task_struct {
...
	pid_t				pid;
	pid_t				tgid;
...
}
#+END_SRC
会话ID和进程组ID保存在信号处理的结构中:
#+BEGIN_SRC C
struct task_struct {
...
	/* Signal handlers: */
	struct signal_struct		*signal;
...
}

// include/linux/sched/signal.h
struct signal_struct {
...
	/* PID/PID hash table linkage. */
	struct pid *pids[PIDTYPE_MAX]; // 根据上面的id的宏确定是会话id还是进程组id
...
}

static inline struct pid *task_pgrp(struct task_struct *task)
{
	return task->signal->pids[PIDTYPE_PGID];
}

static inline struct pid *task_session(struct task_struct *task)
{
	return task->signal->pids[PIDTYPE_SID];
}
#+END_SRC
**** 管理PID
***** 数据结构
- PID分配器： 加速新ID分配
- 辅助函数：通过ID及类型查找进程的 task_struct 的功能、将ID的内核表示形式和用户空间可见的数值进行转换的功能
#+BEGIN_SRC C
// include/linux/pid_namespace.h
struct pid_namespace {
...
	struct task_struct *child_reaper;
	struct kmem_cache *pid_cachep;
	unsigned int level;
	struct pid_namespace *parent;
...
}
#+END_SRC

- 每个PID命名空间都具有一个进程，作用相当于全局的init进程。init的目的是对孤儿进程调用
wait4 ， 命名空间局部的init变体也必须完成该工作。child_reaper 保存指向该进程的task_struct指针
- parent 是指向父命名空间的指针，level 表示命名空间的层次结构中的深度

PID的管理围绕两个数据结构展开，struct pid 是内核对PID的内部表示，而 struct upid则表示
特定的命名空间可见的信息：
#+BEGIN_SRC C
// include/linux/pid.h
struct upid {
	int nr;                   // ID的数值
	struct pid_namespace *ns; // ID所属的命名空间
};

struct pid
{
	atomic_t count;                        // 引用计数
	unsigned int level;
	/* lists of tasks that use this pid */
	struct hlist_head tasks[PIDTYPE_MAX];   // 一个ID可能用于多个进程
	struct rcu_head rcu;
	struct upid numbers[1];
};
#+END_SRC

[[file:img/Snipaste_2018-12-30_15-06-56.png]]

所有共享同一ID的task_struct实例都按进程存储在一个散列表中：
#+BEGIN_SRC C
struct task_struct　｛
...
	/* PID/PID hash table linkage. */
	struct pid			*thread_pid;
	struct hlist_node		pid_links[PIDTYPE_MAX];
	struct list_head		thread_group;
	struct list_head		thread_node;
...
｝

// include/linux/type.h
struct list_head {
	struct list_head *next, *prev;
};

struct hlist_head {
	struct hlist_node *first;
};
struct hlist_node {
	struct hlist_node *next, **pprev;
};
#+END_SRC
将 pid 实例附加到 task_struct :
#+BEGIN_SRC C
// kernel/pid.c
static struct pid **task_pid_ptr(struct task_struct *task, enum pid_type type)
{
	return (type == PIDTYPE_PID) ?
		&task->thread_pid :
		&task->signal->pids[type];
}
/*
 * attach_pid() must be called with the tasklist_lock write-held.
 */
void attach_pid(struct task_struct *task, enum pid_type type)
{
	struct pid *pid = *task_pid_ptr(task, type);
	hlist_add_head_rcu(&task->pid_links[type], &pid->tasks[type]);
}

// include/linux/rculist.h
static inline void hlist_add_head_rcu(struct hlist_node *n,
					struct hlist_head *h)
{
	struct hlist_node *first = h->first;

	n->next = first;
	n->pprev = &h->first;
	rcu_assign_pointer(hlist_first_rcu(h), n);
	if (first)
		first->pprev = &n->next;
}
#+END_SRC
这里建立了向连接： task_struct 可以通过 task_pid_ptr 返回pid实例，pid 遍历task[type]
散列表找到 task_struct。hlist_add_head_rcu 是遍历散列表的标准函数。
***** 函数
内核必须完成两个不同的任务
- 给出局部数字ID和对应的命名空间，查找此二元组描述的task_struct
- 给出 task_struct、ID类型、命名空间，取得命名空间局部的ID。
****** 获得与 task_struct 关联的 pid 实例
       辅助函数 task_pid、task_tgid、task_pgrp、task_session：
#+BEGIN_SRC C
// sched.d
static inline struct pid *task_pid(struct task_struct *task)
{
	return task->thread_pid;
}

// signal.h
static inline struct pid *task_tgid(struct task_struct *task)
{
	return task->signal->pids[PIDTYPE_TGID];
}
static inline struct pid *task_pgrp(struct task_struct *task)
{
	return task->signal->pids[PIDTYPE_PGID];
}
static inline struct pid *task_session(struct task_struct *task)
{
	return task->signal->pids[PIDTYPE_SID];
}
#+END_SRC

- 获得 pid 实例之后，根据命名空间从struct pid 的 =numbers= 中的 =uid= 获得数字 ID:
#+BEGIN_SRC C
pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns)
{
	struct upid *upid;
	pid_t nr = 0;  // 局部ID

    /*确保子命名空间不能访问父命名空间的ID*/
	if (pid && ns->level <= pid->level) {
		upid = &pid->numbers[ns->level];
		if (upid->ns == ns)
			nr = upid->nr;
	}
	return nr;
}
/*其它辅助函数*/
pid_t pid_vnr(struct pid *pid)
{
	return pid_nr_ns(pid, task_active_pid_ns(current));
}
#+END_SRC
内核提供了合并前面步骤的辅助函数：
#+BEGIN_SRC C
// sched.h
static inline pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
static inline pid_t task_pid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
static inline pid_t task_pgrp_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
static inline pid_t task_session_nr_ns(struct task_struct *tsk)
#+END_SRC
****** 将数字ID和命名空间转换为pid实例
1. 根据PID和命名空间指针计算在pid_hash数组中的索引，然后遍历散列表直至找到所要的元素，
辅助函数 find_pid_ns:
#+BEGIN_SRC C
// kernel/pid.c
struct pid *find_pid_ns(int nr, struct pid_namespace *ns)
#+END_SRC
2. pid_task 取出pid_tasks[type]散列表中第一个 task_struct 实例

这两步可以通过辅助函数 find_task_by_pid_ns 完成：
#+BEGIN_SRC C
// kernel/pid.c
/*
 * Must be called under rcu_read_lock().
 */
struct task_struct *find_task_by_pid_ns(pid_t nr, struct pid_namespace *ns)
{
	RCU_LOCKDEP_WARN(!rcu_read_lock_held(),
			 "find_task_by_pid_ns() needs rcu_read_lock() protection");
	return pid_task(find_pid_ns(nr, ns), PIDTYPE_PID);
}
#+END_SRC
- find_task_by_vpid() : 通过局部数字PID查找进程
- find_task_by_pid() : 通过全局数字PID查找进程
***** 生成唯一的PID
      内核使用位图标识PID，分配一个PID等同于找图中第一个值为0的比特，并置为1。释放将1
切换为0
****** 分配
#+BEGIN_SRC C
// kernel/pid.c
struct pid *alloc_pid(struct pid_namespace *ns)
{
	struct pid *pid;
	enum pid_type type;
	int i, nr;
	struct pid_namespace *tmp;
	struct upid *upid;
	int retval = -ENOMEM;

    // 从 slab 缓存系统中分配 pid 对象
	pid = kmem_cache_alloc(ns->pid_cachep, GFP_KERNEL);
	if (!pid)
		return ERR_PTR(retval);

	tmp = ns;
	pid->level = ns->level;

    // 每一个父命名空间分配一个 pid 数值
	for (i = ns->level; i >= 0; i--) {
		int pid_min = 1;

		idr_preload(GFP_KERNEL);     // 条件变量
		spin_lock_irq(&pidmap_lock); // 给pid位图加锁

		/*
		 * init really needs pid 1, but after reaching the maximum
		 * wrap back to RESERVED_PIDS
		 */
		if (idr_get_cursor(&tmp->idr) > RESERVED_PIDS)
			pid_min = RESERVED_PIDS;

		/*
		 * Store a null pointer so find_pid_ns does not find
		 * a partially initialized PID (see below).
		 */
		nr = idr_alloc_cyclic(&tmp->idr, NULL, pid_min,
				      pid_max, GFP_ATOMIC);
		spin_unlock_irq(&pidmap_lock);
		idr_preload_end();

		if (nr < 0) {
			retval = (nr == -ENOSPC) ? -EAGAIN : nr;
			goto out_free;
		}

		pid->numbers[i].nr = nr;
		pid->numbers[i].ns = tmp;
		tmp = tmp->parent;
	}

	if (unlikely(is_child_reaper(pid))) {
		if (pid_ns_prepare_proc(ns))
			goto out_free;
	}

	get_pid_ns(ns);
	atomic_set(&pid->count, 1);
	for (type = 0; type < PIDTYPE_MAX; ++type)
		INIT_HLIST_HEAD(&pid->tasks[type]);

	upid = pid->numbers + ns->level;
	spin_lock_irq(&pidmap_lock);
	if (!(ns->pid_allocated & PIDNS_ADDING))
		goto out_unlock;
	for ( ; upid >= pid->numbers; --upid) {
		/* Make the PID visible to find_pid_ns. */
		idr_replace(&upid->ns->idr, pid, upid->nr);
		upid->ns->pid_allocated++;
	}
	spin_unlock_irq(&pidmap_lock);

	return pid;

out_unlock:
	spin_unlock_irq(&pidmap_lock);
	put_pid_ns(ns);

out_free:
	spin_lock_irq(&pidmap_lock);
	while (++i <= ns->level)
		idr_remove(&ns->idr, (pid->numbers + i)->nr);

	/* On failure to allocate the first pid, reset the state */
	if (ns->pid_allocated == PIDNS_ADDING)
		idr_set_cursor(&ns->idr, 0);  // 分配失败位图置 0

	spin_unlock_irq(&pidmap_lock);

	kmem_cache_free(ns->pid_cachep, pid);
	return ERR_PTR(retval);
}
#+END_SRC
****** 回收 pid
#+BEGIN_SRC C
void free_pid(struct pid *pid)
{
	/* We can be called with write_lock_irq(&tasklist_lock) held */
	int i;
	unsigned long flags;

	spin_lock_irqsave(&pidmap_lock, flags);
	for (i = 0; i <= pid->level; i++) {
		struct upid *upid = pid->numbers + i;
		struct pid_namespace *ns = upid->ns;
		switch (--ns->pid_allocated) {
		case 2:
		case 1:
			/* When all that is left in the pid namespace
			 * is the reaper wake up the reaper.  The reaper
			 * may be sleeping in zap_pid_ns_processes().
			 */
			wake_up_process(ns->child_reaper);
			break;
		case PIDNS_ADDING:
			/* Handle a fork failure of the first process */
			WARN_ON(ns->child_reaper);
			ns->pid_allocated = 0;
			/* fall through */
		case 0:
			schedule_work(&ns->proc_work);
			break;
		}

		idr_remove(&ns->idr, upid->nr);
	}
	spin_unlock_irqrestore(&pidmap_lock, flags);

	call_rcu(&pid->rcu, delayed_put_pid);
}
#+END_SRC
*** 进程关系
- 父子进程
- 兄弟进程

数据结构表示 ：
#+BEGIN_SRC C
struct task_struct {
...
	struct list_head		children; // 子进程链表
	struct list_head		sibling;  // 连接到父进程链表
...
}
#+END_SRC

[[file:img/Snipaste_2019-01-03_10-37-08.png]]

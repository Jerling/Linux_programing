* 第三章 索引结构
[[file:img/2018-12-20-093146_395x317_scrot.png]]


** 索引结构基础
- 基本概念
  1. 存储结构由文件构成
  2. 数据文件可以存储一个关系或多个索引文件
  3. 索引文件建立查找键和数据记录之间的关系
  4. 查找键的指针指向与查找键具有相同的记录
- 索引
  1. 可以是“稠密的”：数据文件中每个记录在索引文件中都设有一个索引项
  2. 可以是“稀疏的”：数据文件中只有一些记录在索引文件中表示出来，通常为每个数据块在索引文件中设有一个索引项
  3. 可以是"主索引"或"辅助索引"：主索引能确定记录在数据文件中的位置，而辅助索引不能

*** 顺序文件
    是对关系中的元组按主键进行排序而生成的文件。

*** 稠密索引
    在排好序的记录上建立稠密索引，块中只存放记录的键以及指向记录本身的指针。文件中的索引块保持键的顺序与文件中的排序顺序
一致。

[[file:img/2018-12-20-101416_791x448_scrot.png]]

- 索引有效的因素：
  1. 索引块数量通常比数据块数量少
  2. 由于键的排序，使用二分查找
  3. 索引文件可能足够小，可以永久地存放在主存缓冲区中

*** 稀疏索引
    只为数据文件的每个存储块设一个键-指针对，比稠密索引节省了更多的存储空间，但查找给定值的记录需更多的时间。只有当
数据文件按照某个查找键排序时，在该查找键上建立的稀疏索引才能被使用，而稠密索引则可以应用在任何的查找键。

[[file:img/2018-12-20-102634_316x350_scrot.png]]


*** 多级索引
    [[file:img/2018-12-20-103240_507x337_scrot.png]]


*** 辅助索引
    可用于分身任何索引目的：有助于查找给定一个或多个字段的记录。与主索引最大的差别是辅助索引不决定数据文件中记录的
存放位置。而只能告知记录的当前位置，这五位置可能是由建立在其他某个字段的索引确定的。辅助索引总是稠密的。

**** 运用
- 在顺序文件的关系上建立附加索引
- 可以用作某些数据结构的主健索引，如堆。
- 可以用于聚集文件。

**** 间接
[[file:img/2018-12-20-105200_485x354_scrot.png]]


*** 文档检索和倒排索引
- 基本术语
  - 文档可被看成是关系 Doc 的元组
  - 关系 Doc 的每个属性上都建有辅助索引
  - 不给每个属性建立单独的索引，而是把所有的索引合成一个，称为倒排索引。使用间接桶来提高空间利用率

[[file:img/2018-12-20-105905_491x436_scrot.png]]

** B-树
- B-树能自动地保持与数据文件大小相适应的索引层次
- 管理存储块空间在半满与全满之间

*** 结构
[[file:img/Snipaste_2018-12-25_09-30-11.png]]

- 平衡的： 树根到树叶的路径一样
- 三层： 根、中间层、叶，也可以是任意多层
- 每个 B- 树索引都有一个参数 n, 决定存储块的布局
- 每个存储块存放 n 个查找键值和 n+1 个指针（一个额外指针）的铎键指对
- 在存储块能容纳 n 个键和 n+1 个指针的前提下，n取得尽量大

*** 应用
- 查找键是数据文件的主键，且索引是稠密的：叶结点中为数据文件的每一个记录设有一个键-指对。
- 数据文件按主键排序，且 B+ 树是稀疏索引，在叶结点 中为数据文件的每个块设有一个键-指针对。
- 数据文件按非键性属性排序，且该属性是 B+ 树的查找键。叶结点中为数据文件里出现的每个属性值 K 设有一个键-指针对，
其中指针指向排序键值为 K 的记录。

*** 查找
查找过程：
- 基础：若处于叶结点上， 就在结点键值中查找。
- 归纳：处于内部结点，比较决定下一步对哪个子结点进行查找。

*** 范围查询
    如果想在 B- 树叶结点上找出[a,b] 的所有键值，通过一次查找找出 a, 然后在大于 a 的键中查找 b。

*** 插入
    插入原则上的递归的：
- 在适当的叶结点中为新键找到空闲的空间
- 叶结点没有空间，把该叶结点分裂成两个并且把其中的键分到这两个新结点中，使每个新结点有一半或刚好超过一半的键
- 某一层的分裂在上一层看来相当于是要在较高的层次插入一个新的键指针对。
- 如果试图插入键到一个新的结点中并且根结点没有空间，就分裂根结点成两个结点且在更上一层创建一个新的根结点，
这个新根结点有两个刚分裂成的结点作为它的子结点。

实例：

[[file:img/Snipaste_2018-12-25_11-20-42.png]]

[[file:img/Snipaste_2018-12-25_11-22-25.png]]

*** 删除
- 如果与结点 N 相邻的兄弟中有一个的键和指针超过最小数目，那它的一个键-指针对可以移到结点 N 中并保持键的顺序。
- 当相邻的两个兄弟中没有一个能提供键值给结点 N 时。将结点 N 与兄弟结点合并，然后调整父结点的键，即删除父结点上
一个键和指针。如果父结点足够满，完成删除，否则递归使用删除算法。

*** 效率
    B- 树能实现记录的查找、插入和删除，而每个文件操作只需要很少的磁盘I/O。如果每个块容纳的键数 n
相当大，那么分裂或合并的情况将会很少。绝大多数时候都被局限在叶结点，因此只有两个叶结点和它们的父结点
受到影响。

** 散列表

*** 辅存散列表
    散列表包含大量记录，所以主要放在辅助存储器上，因此在一些细小而重要的方面与主存中的散列表存在区别：
- 桶数组由存储块组成而不是由指向链表头的指针组成
- 桶中记录太多，可以给该桶加溢出块的链以存放更多的记录

*** 插入和删除
    [[file:img/Snipaste_2018-12-26_10-14-43.png]]

    [[file:img/Snipaste_2018-12-26_10-15-48.png]]

** 多维索引
   一维方式键空间方式：
- 顺序文件上的索引和B-树都利用一维键空间具有单一、有序的特点
- 散列表要求查找的查找键值是完全知道的

*** 综述
    多维数据查询的数据结构类型：
- 类散列表方法
- 类树方法

  对于这些数据结构中，必须放弃一些特性，如树：
- 树的平衡，那里所有叶结点位于同一层
- 树结点和磁盘块的对应
- 数据修改执行的速度

** 多维数据的散列结构
- 风格文件：通常不是按维来散列值
- 分段散列：散列各维，且每一维都影响桶号

** 多维数据的树结构
   - 多键索引
   - kd-树
   - 四叉树
   - R树

*** 多键索引
    [[file:img/Snipaste_2018-12-27_14-12-35.png]]

**** 性能
- 部分匹配查询：如果第一个属性有效，则性能比较好，否则需要找到子索引，这是一个耗时的过程。
- 范围查询
- 最近邻查询：通过一系列范围查询完成

*** kd-树
    k维搜索树是把二维推广到多维数据的一种主存数据结构。

** 位图索引
   位图索引是一个长度为 n 的位向量的集合，每一个位向量对于字段中可能出现的一个值。

** 总结
- 顺序文件：将数据文件按某个排序键排序并在该文件上建立索引
- 稠密索引和稀疏索引：前者为数据文件的每个记录设一个键-指针对，而后者为其每个存储块设一个键-指针对
- 多级索引：在索引文件上再建索引
- 辅助索引：即使文件没有按查找键 K 排序，也可以在 K 上建立索引
- 倒排索引：文件及其包含的词之间的关系通常可通过一个词-指针的索引结构表示
- B-树：实质上是有着很好的扩充性能的多级索引
- 散列表：可以基于辅存的存储块建立散列表
- 可扩展散列：允许在存在记录太多的桶时将桶的数目加倍
- 线性散列：当桶中的记录比例超出阈值进增加一个桶
- 多维索引查询：部分匹配、范围查询、最近邻查询和 where am I查询
- 网格文件：在每一维上切分点空间
- 分段散列表：从每一维上构造桶号的一些二进制位
- 多键索引：
- kd-树：按不同层次在不同属性上分支
- 四叉树：划分多维立方体成四个象限
- R-树：这种树的结构通常表示区域的集合，聚集它们成一个更大区域的层次结构
- 位图索引：支持多维查询
- 压缩位图：通过采用分段长度编码来对位图索引进行压缩。

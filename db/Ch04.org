* 查询执行
  [[file:img/Snipaste_2018-12-29_10-11-07.png]]

- 查询处理：查询被编译，涉及大量优化，然后被执行
- 查询计划：查询首先被编译为类似关系代数表达式的逻辑查询计划，通过为每一个操作符选择一个实现，对连接排定顺序并做出一些其他的决定将逻辑查询计划转化为物理查询计划
- 表扫描：简单地读取存放关系的元组的块。索引扫描使用索引来找到元组，排序扫描产生排也序的元组
- 物理操作符的代价度量：主要是操作占用的磁盘 I/O 的数量。
- 迭代器：将一个查询的执行看作是由迭代器操作：打开关系、得到关系的下一个元组，关上这个结构
- 一趟算法：关系代数操作符的一个操作对象能够装入内存，就可以将小和关系读进内存，并一次一个块地读另一个操作对象来执行这个操作符
- 嵌套循环：将较小的关系尽可能多地读入内存，并将它与整个的另一个作对象比较
- 两趟算法：对于不能装入内存的操作对象的大多数算法，基于排序、散列或索引
- 基于排序的算法：将操作对象分割成内存大小和、排序的子表。然后子表归并来产生所需的结果
- 基于散列的算法：使用一个散列函数将操作对象分割到桶中，然后将操作分别对应到桶(一元操作)和桶对(二元操作)上
- 散列与排序：基于散列的算法常常优于基于排序的算法
- 基于索引的算法：对于条件是索引属性等于常量的选择来说，索引是提高性能的一种极好的方式
- 缓冲区管理器：内存块的可用性是由缓冲区管理器来控制的
- 费用单区数目变化应策：通常，用于一个操作的可用的内存缓冲区的数目是不可预测的，当可用的缓冲区数目减少时，用于实现操作的算法会大大降级
- 多趟算法：基于排序的或匡威地散列的两趟算法可以自然在递推到三趟或更多趟，用来运行更大的数据量

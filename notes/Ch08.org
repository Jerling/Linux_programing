* UNP卷1：第八章（基本UDP套接字编程）
** 1. 简单的 UDP 回射程序
*** 1.1. 服务端
#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <sys/types.h>
#include <string.h>   // bzero

#define MAXLINE 1024
#define SA struct sockaddr

void dg_echo(int sockfd, SA *pcliaddr, socklen_t clilen);
int main(int argc, char **argv)
{
    int     sockfd;
    struct  sockaddr_in servaddr, cliaddr;

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);

    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(9877);

    bind(sockfd, (SA *)&servaddr, sizeof(servaddr));

    dg_echo(sockfd, (SA *)&cliaddr, sizeof(cliaddr));

    return 0;
}

void dg_echo(int sockfd, SA *pcliaddr, socklen_t clilen)
{
    int         n;
    socklen_t   len;
    char        mesg[MAXLINE];

    for ( ; ; ){
        len = clilen;
        n = recvfrom(sockfd, mesg, MAXLINE, 0, pcliaddr, &len);

        sendto(sockfd, mesg, n, 0, pcliaddr, len);
    }
}
#+END_SRC
*** 1.2. 客户端
#+BEGIN_SRC C
  #include <stdio.h>
  #include <stdlib.h>
  #include <sys/socket.h>
  #include <sys/types.h>
  #include <netinet/in.h>
  #include <string.h>     // bzero
  #include <arpa/inet.h>  // inet_pton

  #define MAXLINE 1024
  #define SA struct sockaddr

  void dg_cli(FILE *fp, int sockfd, const SA *pservaddr, socklen_t servlen);
  int main(int argc, char **argv)
  {
      int     sockfd;
      struct  sockaddr_in servaddr;
      if (argc != 2){
          printf("argument should be 2\n");
          exit(-1);
      }

      bzero(&servaddr, sizeof(servaddr));
      servaddr.sin_family = AF_INET;
      servaddr.sin_port = htons(9877);
      inet_pton(AF_INET, argv[1], &servaddr.sin_addr);

      sockfd = socket(AF_INET, SOCK_DGRAM, 0);

      dg_cli(stdin, sockfd, (SA *)&servaddr, sizeof(servaddr));

      exit(0);
  }
  void dg_cli(FILE *fp, int sockfd, const SA *pservaddr, socklen_t servlen)
  {
      int     n;
      char    sendline[MAXLINE], recvline[MAXLINE + 1];

      while (fgets(sendline, MAXLINE, fp) != NULL){
          sendto(sockfd, sendline, strlen(sendline), 0, pservaddr, servlen);
          n = recvfrom(sockfd, recvline, MAXLINE, 0, NULL, NULL);

          recvline[n] = 0;
          fputs(recvline, stdout);
      }
  }
#+END_SRC
*** 1.3. 程序运行
服务端：
#+BEGIN_SRC bash
jer@T460P  ~  /tmp/ser.out
#+END_SRC

客户端：
#+BEGIN_SRC bash
jer@T460P  ~  /tmp/cli.out 127.0.0.1
test udp
test udp
#+END_SRC

** 2. 服务器进程未运行时客户端的阻塞
如果服务器未启动而客户端发送一行文本，则客户永远阻塞于它的 *recvfrom* 调用，等待一个永不出现的服务器应答
（所以下例中 *tcpdump* 只显示第一行 *hello world* 的信息，而其余的信息已经被阻塞了）：
*** 2.1. 实例
1. 先启动 *tcpdump* ，指定监测的流量要和本地的网卡对应, 比如本例监测回环地址(127.0.0.1), 则监测 lo 网卡
#+BEGIN_SRC bash
jer@T460P  ~  sudo tcpdump -i lo udp port 9877
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes
#+END_SRC

2. 启动客户端并发送数据（保证服务关闭）
#+BEGIN_SRC bash
tmp/cli.out 127.0.0.1
test with out server
#+END_SRC

3. 查看 *tcpdump* 监测结果
#+BEGIN_SRC bash
jer@T460P  ~  sudo tcpdump -i lo udp port 9877
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes
20:18:07.003098 IP localhost.36047 > localhost.9877: UDP, length 21
#+END_SRC
*tcpdump* 只显示 *test with out server* 发送的文本，而接着发送 *test with out server2* 则没有任何的反应，
因为 *已经阻塞* 了。其中 *9877* 是服务器指定的总所周知的端口号，而 *36047* 为客户端临时端口。
** 3. UDP的connect函数
*** 3.1. connect函数的起源
除非套接字已连接，否则异步错误是不会返回到 *UDP套接字的。可以给 *UDP* 套接字调用 *connect* ，
然而这样做的结果却与 *TCP* 连接大相近庭：没有三次握手过程。内核只是检查是否存在立即可知的错误，
记录对端的 *IP地址和端口号* （取自传递给 *connect* 的套接字地址结构），然后立即返回到调用进程。

有了这个能力后，必须区分：

1. *未连接UDP套接字* ， *新创建UDP* 套接字默认如此。

2. *已连接UDP套接字* ，对 *UDP* 套接字调用 *connect* 的结果。

3. 对于 *已连接UDP* 套接字，与默认的未连接UDP套接字相比，发生了三个变化：
   1. 再也不能给输出操作指定目的IP地址和端口号。也就是说，不使用 *sendto* 而改用 *write* 或 *send* 。
写到已连接 *UDP* 套接字上的任何内容都自动发送到由 *connect* 指定的协议地址（例如IP地址和端口号）

   2. 不必使用 *recvfrom* 以获悉数据报的发送者，而改用 *read* , *recv* 或 *recvmsg* 。
在一个已连接 *UDP* 套接字上，由内核为输入操作返回的数据报只有那些来自 *connect* 所指定协议地址的数据报。
目的地为这个已连接 *UDP* 套接字的本地协议地址（例如IP地址和端口号），发源地却不是该套接字早先 *connect*
到的协议地址的数据报，不会投递到该套接字。这样就限制一个 *已连接UDP* 套接字 *能且仅能与一个对端* 交换数据报。

   3. 由 *已连接UDP套接字* 引发的 *异步错误* 会返回给它们所在的进程，
而 *未连接UDP套接字不接收* 任何异步错误。
*** 3.2. 使用 connect 的客户端
#+BEGIN_SRC C
void dg_cli( FILE *fp, int sockfd, const SA *pservaddr, socklen_t servlen )
{
	int	n;
	char	sendline[ MAXLINE ], recvline[ MAXLINE + 1 ];

	Connect( sockfd, ( SA * )pservaddr, servlen );

	while ( fgets( sendline, MAXLINE, fp ) != NULL ){
		write( sockfd, sendline, strlen( sendline ) );
		n = read( sockfd, recvline, MAXLINE );

		if ( n < 0 ){
			printf("read error\n");
			return;
		}
		recvline[ n ] = 0;
		fputs( recvline, stdout );
	}
}

int main( int argc, char **argv )
{
	int	sockfd;
	struct	sockaddr_in	servaddr;

	bzero( &servaddr, sizeof( servaddr ) );
	servaddr.sin_family = AF_INET;
	servaddr.sin_port = htons( 9877 );
	inet_pton( AF_INET, argv[ 1 ], &servaddr.sin_addr );

	sockfd = Socket( AF_INET, SOCK_DGRAM, 0 );

	dg_cli( stdin, sockfd, ( SA * )&servaddr, sizeof( servaddr ) );

	exit( 0 );
}
#+END_SRC

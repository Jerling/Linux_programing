* UNP卷1：第一章
** 1. 时间获取程序
1. 服务端：server.c
#+begin_src C
#include <time.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <fcntl.h>
#include <string.h> // for bzero strerror
#include <unistd.h> // for fork
#include <wait.h>   // for wait, waitpid
#include <error.h>  // for errno

#define SA struct sockaddr
#define MAXLINE 1024

int main( void )
{
	int	listenfd, connfd;
	struct 	sockaddr_in	servaddr;
	char	buff[ MAXLINE ];
	time_t	ticks;
	pid_t	pid;

	listenfd = socket( AF_INET, SOCK_STREAM, 0 );

	bzero( &servaddr, sizeof( servaddr ) );
	servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
	servaddr.sin_port = htons(7777);

	bind(listenfd, ( SA * )&servaddr, sizeof(servaddr));
	listen( listenfd, 5 );

	for( ; ; ){
		connfd = accept( listenfd, ( SA * )NULL, NULL);
		pid = fork();
		if ( 0 == pid ){
			ticks = time( NULL );
			snprintf(buff, sizeof(buff), "%.24s\r\n", ctime(&ticks));
			write( connfd, buff, strlen(buff));
			exit(1);
		}
		if ( waitpid(pid, NULL,0 ) != pid ){
			printf("waitpid error");
			exit(1);
		}
		close( connfd );
	}

	return 0;
}
#+end_src

2. 客户端：client.c
#+begin_src C
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <string.h>   // for bzero
#include <unistd.h>   // for exit
#include <arpa/inet.h>// for inet_pton

#define SA struct sockaddr
#define MAXLINE 1024
int main( int argc, char **argv )
{
	int	sockfd, n;
	char	recvline[ MAXLINE + 1 ];
	struct	sockaddr_in	servaddr;

	if ( argc != 2 ){
		printf("usage:a.out <IPaddress>");
		exit(1);
	}
	if ( ( sockfd = socket( AF_INET, SOCK_STREAM, 0 ) ) < 0 ){
		printf("socket error\n");
		exit(1);
	}
	bzero( &servaddr, sizeof( servaddr ) );
	servaddr.sin_family = AF_INET;
	servaddr.sin_port = htons( 7777 );

	if ( inet_pton( AF_INET, argv[ 1 ], &servaddr.sin_addr ) <= 0 ){
		printf("inet_pton error for %s", argv[1]);
		exit(1);
	}

	if ( connect( sockfd, ( SA * )&servaddr, sizeof( servaddr ) ) < 0 ){
		printf("connect error\n");
		exit(1);
	}

	while ( ( n = read( sockfd, recvline, MAXLINE )) > 0){
		recvline[n] = 0;
		if (fputs(recvline, stdout) == EOF){
			printf("fputs error\n");
			exit(1);
		}
	}
	if (n < 0){
		printf("read error\n");
		exit(1);
	}

	exit(0);
}
#+end_src

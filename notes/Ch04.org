* UNP卷1：第四章（基本TCP套接字编程）
** 1. TCP 连接的建立与终止
*** 1.1. 三次握手
1. 服务器必须准备好接受外来的连接。这通常通过调用 =socket= , =bind= 和 =listen= 这三个函数来完成，称之为被动打开。
2. 客户通过调用 =connect= 发起主动打开。这导致 *客户TCP* 发送一个 *SYN（同步）* 分节，它告诉服务器客户将在（待建立的）连接中发送的数据的初始序列号。通常 *SYN* 分节不携带数据，其所在 *IP* 数据报只含有一个 *IP* 部，一个 *TCP* 首部及可能有的 *TCP* 选项。
   - *TCP* 选项之 *MSS* 选项：
   发送 *SYN* 的 *TCP* 一端使用本选项通告对端它的最大分节大小（maximum segment size）即 *MSS* ，也就是它在本连接的每个 *TCP* 分节中愿意接受的最大数据量。发送端 *TCP* 使用接收端的 *MSS* 值作为所发送分节的最大大小。
3. 服务器必须确认（ *ACK* ）客户的 *SYN* ，同时自己也得发送一个 *SYN* 分节，它含有服务器将在同一连接中发送的数据的初始序列号。服务器在单个分节中发送 *SYN* 和对客户 *SYN* 的 *ACK* 
4. 客户必须确认服务器的SYN。

这种交换至少需要3个分组，因此称之为TCP的三路握手。（这里SYN为1字节，所以ACK时候只要在K上简单加1即可）

[[https://box.kancloud.cn/2016-06-20_57678b2f0b396.jpg]]
*** 1.2. TCP连接终止
    TCP终止一个连接则需4个分节：
1. 某个应用进程首先调用 =close= ，我们称该端执行主动关闭。该端的 *TCP* 于是发送一个 *FIN* 分节，表示数据发送完毕。
2. 接收到这个 *FIN* 的对端执行被动关闭。这个 *FIN* 由 *TCP* 确认。它的接收也作为一个文件结束符 *（EOF）* 传递给接收端应用进程（放在已排队等候该应用进程接收的任何其他数据之后），因为FIN的接收意味着接收端应用进程在相应连接上再无额外数据可接收。
3. 一段时间后，接收到这个文件结束符的应用进程将调用close关闭它的套接字。这导致它的 *TCP* 也发送一个 *FIN* 。
4. 接收这个最终FIN的原发送端TCP（即执行主动关闭的那一端）确认这个FIN。

#+begin_quote
备注：从执行被动关闭到执行主动关闭（步骤2和步骤3之间）一端流动数据是可能的，这称为半关闭，毕竟当时接收端的套接字并未 =close= 掉。（ *FIN* 和 *SYN* 一样为1字节，所以 *ACK* 也是简单的 *N+1* ）
#+end_quote

[[https://box.kancloud.cn/2016-06-20_57678b2f2d781.jpg]]
*** 1.3. *TCP* 状态转换图
[[https://box.kancloud.cn/2016-06-20_57678b2f55bb3.jpg]]
*** 1.4. 观察分组
[[https://box.kancloud.cn/2016-06-20_57678b2f81d9a.jpg]]
** 2. 相关函数
*** 2.1 *socket* 函数
    为了执行网络 *I/O* ，一个进程必须做的第一件事就是调用 *socket* 函数，指定期望的通信协议类型。
#+BEGIN_SRC C
#include <sys/socket.h>
int socket( int family, int type, int protocol );
                  // 返回：若成功则为非负描述符，若出错则为-1
#+END_SRC
**** 2.1.1 *socket* 的 *family* 常值
 | amily	  | 说明           |
 |------------+----------------|
 | AF_INET    | IPv4协议       |
 | AF_INET6   | 	IPv6协议   |
 | AF_LOCAL   | 	unix域协议 |
 | AF_ROUTE   | 	路由套接字 |
 | AF_KEY	 | 密钥套接字     |
**** 2.1.2 *socket* 的 *type* 常值
 | type	       | 说明             |
 |----------------+------------------|
 | SOCK_STREAM    | 	字节流套接字 |
 | SOCK_DGRAM	 | 数据报套接字     |
 | SOCK_SEQPACKET | 有序分组套接字   |
 | SOCK_RAW	   | 原始套接字       |
**** 2.1.3 *socket* 的 *protocol* 常值
| protocol	    | 说明             |
|-----------------+------------------|
| IPPROTO_TCP	 | TCP传输协议      |
| IPPROTO_UDP	 | UDP传输协议      |
| IPPROTO_SCTP    | 	SCTP传输协议 |

*socket* 函数在成功时返回一个小的 *非负* 整数值，它与文件描述符类似，我们把它称为套接字描述符，简称 *sockfd* .
对于unix一切皆文件，则套接字描述符为网络通信中的文件描述符。程序可以通过套接字描述符进行通信。
*** 2.2. *connect* 函数
    *TCP* 客户用 *connect* 函数来建立与TCP服务器的连接
#+BEGIN_SRC C
#include <sys/socket.h>
int connect( int sockfd, const struct sockaddr *servaddr, socklen_t addrlen );
                // 返回：若成功则为0，若出错则为-1
#+END_SRC

*sockfd* 是由 *socket* 函数返回的套接字描述符，第二个，第三个参数分别是一个指向套接字地址结构的指针和该结构的大小。

客户在调用函数 *connect* 前 *不必* 非得调用 *bind* 函数，因为如果需要的话，内核会确定源IP地址，并选择一个 *临时端口* 作为源端口。

如果是 *TCP* 套接字，调用 *connect* 函数将激发 *TCP* 的三路握手过程，而且仅在连接建立成功或出错时才返回，其中错误返回可能有以下几种情况：
1. 若 *TCP* 客户没有收到 *SYN* 分节的响应，则返回 *ETIMEDOUT* 错误（超时）

2. 若对客户的 *SYN* 的响应是 *RST* （表示复位），则表明该服务器主机在指定的端口上没有进程在等待与之连接（例如服务器进程也许没在运行，毕竟端口用于标识一个进程）。这是一种硬件错误（hard error），客户一接收到 *RST* 就马上返回 *ECONNREFUSED* 错误。
*RST* 是 *TCP* 在发生错误时发送的一种 *TCP* 分节。产生RST的三个条件是：
1) 目的地为某端口的 *SYN* 到达，然而该端口上没有正在监听的服务器
2) *TCP* 想取消一个已有连接；
3) *TCP* 接收到一个根本不存在的连接上的分节。

3.  若客户发出的 *SYN* 在中间的某个路由器上引发了一个 *“destination unreadchable”ICMP* 错误，则认为是一种软件错误 *（soft error）* 。客户主机内核保存该消息，并继续发送 *SYN* 。若超时，则将 *ICMP* 错误作为 *EHOSTUNREACH* 或 *ENETUNREACH* 错误返回给进程。

若 *connect* 失败则该套接字不再可用，必须关闭，不能对这样的套接字再次调用 *connect* 函数。当循环调用函数 *connect* 为给定主机尝试各个 *IP* 地址直到有一个成功时，在每次 *connect* 失败后，都必须 *close* 当前的套接字描述符并重新调用 *socket* 。
*** 2.3. *bind* 函数
    *bind* 函数把一个本地协议地址赋予一个套接字
#+BEGIN_SRC C
#include <sys/socket.h>
int bind( int sockfd, const struct sockaddr *myaddr, socklen_t addrlen );
                          // 返回：若成功则为0，若出错则为-1
#+END_SRC

第二个参数是一个指向特定与协议的地址结构的指针，第三个参数是该地址结构的长度。

1. 服务器在启动时捆绑它们的总所周知端口（端口用于标识一个进程，如果端口为 *0* ，则由内核选择端口,而且必须使用 *getsockname* 来返回协议地址来得到内核所选择的这个端口号）

2. 进程可以把一个特定的IP地址捆绑到它的套接字上（一般都是通配地址，用常量值 *INADDR_ANY* 来指定，如 *htonl( INADDR_ANY)* ）
*** 2.4. *listen* 函数
    *listen* listen函数仅由TCP服务器调用，它做两件事情：
1. 当 *socket* 函数创建一个套接字时，它被假设为一个主动套接字，也就是说，它是一个将调用 *connect* 发起连接的客户套接字。 *listen* 函数把一个未连接的套接字转换成一个 *被动* 套接字，指示内核应接受指向该套接字的连接请求。

2. 第二个参数规定了内核应该为相应套接字排队的 *最大连接个数* 。

#+BEGIN_SRC C
#include <sys/socket.h>
int listen( int sockfd, int backlog );
                    // 返回：若成功则为0，若出错则为-1
#+END_SRC
**** 2.4.1 *backlog*
内核为任何一个给定的监听套接字维护两个队列：
1. 未完成连接队列：每个这个的 *SYN* 分节对应其中一项：已由某个客户发出并到达服务器，而服务器正在等待完成相应的 *TCP* 三路握手过程。这些套接字处于 *SYN_RCVD* 状态。

2. 已完成连接队列：每个已完成 *TCP* 三路握手过程的客户对应其中一项。这些套接字处于 *ESTABLISHED* 状态。

[[https://box.kancloud.cn/2016-06-20_57678b2fa8bed.jpg]]

每当在未完成连接队列中创建一项时，来自监听套接字的参数就复制到即将建立的连接中。连接的创建机制是完全自动的，无需服务器进程握手：
[[https://box.kancloud.cn/2016-06-20_57678b2fc3200.jpg]]
*** 2.5. *accept* 函数
*accept* 函数由 *TCP* 服务器调用，用于从已完成连接队列队头返回下一个 *已完成连接* 。如果已完成连接队列为空，那么进程被投入 *睡眠* （假定套接字为默认的阻塞方式）
#+BEGIN_SRC C
#include <sys/socket.h>
int accept( int sockfd, struct sockaddr *cliaddr, socklen_t *addrlen );
                                 // 返回：若成功则为非负描述符，若出错则为-1
#+END_SRC

参数 *cliaddr* 和 *addrlen* 用来返回已连接的对端进程（客户）的协议地址。 *addrlen* 是 *值-结果* 参数：调用前，将由 *addrlen* 所引用的整数值置为由 *cliaddr* 所指的套接字地址结构的长度，返回时，该整数值即为由内核存放在该套接字地址结构内的确切字节数。

在server.c中增加以下代码，就可以看到客户端的IP和端口了：
#+BEGIN_SRC C
socklen_t len;
struct sockaddr_in	servaddr, cliaddr;
len = sizeof(cliaddr);
connfd = accept( listenfd, ( SA * )&cliaddr, &len );
inet_ntop( AF_INET, &cliaddr.sin_addr, buff, sizeof(buff));
printf("connection from %s,port %d\n", buff , ntohs(cliaddr.sin_port));
#+END_SRC
*** 2.6. *close* 函数
    *close* 函数也用来关闭套接字，并终止 *TCP* 连接。

#+BEGIN_SRC C
#include <unistd.h>
int close( int sockfd );
#+END_SRC
*** 2.7. *getsockname* 和 *getpeername* 函数
    这两个函数或者返回与某个套接字关联的本地协议地址 *(getsockname)* ，或者返回与某个套接字关联的外地协议地址 *（getpeername）*
**** 2.7.1 *getsockname* 测试
1. 服务端
#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <fcntl.h>
#include <netinet/in.h>
#include <unistd.h> // for fork
#include <string.h> // for bzero
#include <wait.h>   // for waitpid

#define MAXLINE 1024
#define SA struct sockaddr

int main(int argc, char **argv)
{
    int     listenfd, connfd;
    char    buff[MAXLINE];
    pid_t   pid;
    time_t  ticks;
    struct  sockaddr_in servaddr;
    struct  sockaddr_in cliaddr;
    socklen_t   cliLen;
    listenfd = socket(AF_INET, SOCK_STREAM, 0);

    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(9877);

    bind(listenfd, (SA *)&servaddr, sizeof(servaddr));

    listen(listenfd, 5);

    for ( ; ; ){
        cliLen = sizeof(cliaddr);
        connfd = accept(listenfd, (SA *)&cliaddr, &cliLen);
        if ((pid = fork()) == 0){
            close(listenfd);
            ticks = time(NULL);
            snprintf(buff, sizeof(buff), "%.24s\r\n", ctime(&ticks));
            write(connfd, buff, strlen(buff));
            _exit(0);
        }
        if (waitpid(pid, NULL, 0) != pid){
            printf("waitpid error\n");
            exit(1);
        }
        close(connfd);
    }

    return 0;
}
#+END_SRC

客户端：
#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <fcntl.h>
#include <unistd.h> // for fork
#include <string.h> // for bzero
#include <arpa/inet.h>

#define MAXLINE 1024
#define SA struct sockaddr

int main(int argc, char **argv)
{
    int     sockfd, n;
    struct  sockaddr_in servaddr;
    char    buff[MAXLINE + 1];
    struct  sockaddr_in cliaddr;
    socklen_t   cliLen;

    if (argc != 2) {
        printf("Usage: %s: 127.0.0.1\n", argv[0]);
    }

    sockfd = socket(AF_INET, SOCK_STREAM, 0);

    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(9877);

    inet_pton(AF_INET, argv[1], &servaddr.sin_addr);

    connect(sockfd, (SA *)&servaddr, sizeof(servaddr));
    cliLen = sizeof(cliaddr);
    getsockname(sockfd, (SA *)&cliaddr, &cliLen);

    while ((n = read(sockfd, buff, MAXLINE)) > 0){
        buff[n] = '\0';
        fputs(buff, stdout);
    }

    return 0;
}
#+END_SRC

转自：[[https://www.kancloud.cn/digest/unix-fzyz-sb/168126][https://www.kancloud.cn/digest/unix-fzyz-sb/168126]]

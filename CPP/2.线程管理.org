* 线程管理
** 1. 线程管理基础
*** 1.1 启动线程
1. C++线程库在构造 =std::thread= 对象的时候启动线程。
#+BEGIN_SRC cpp
void do_some_work();                   // 定义独立任务
std::thread my_thread(do_some_work);   // 启动线程
#+END_SRC
2. =std_thread= 可以调用任何可调用对象。
#+BEGIN_SRC cpp
class background_task
{
public:
  void operator()() const
  {
    do_something();
    do_something_else();
  }
};
background_task f;
std::thread my_thread(f);
#+END_SRC
函数对象会复制到线程存储空间，执行和调用都在线程空间。

3. 如何传递一个临时变量而非命名变量，编译器会将其视为函数声明而非类型对象的定义。
#+BEGIN_SRC cpp
std::thread my_thread(background_task());  // 传递临时变量
#+END_SRC
相当于声明了一个带函数(background_task)为参数的 =my_thread= 函数。而不是启动一个线程。

可以使用多组括号、初始化列表语法或lambda表达式避免歧义：
#+BEGIN_SRC cpp
std::thread my_thread((background_task()));
std::thread my_thread{background_task()};
std::thread my_thread([]{
    do_something();
    do_something_else();
});
#+END_SRC
4. 如果不等待线程，必须保证结束前可访问数据的有效性。这种情况多发生于线程没结束，函数已经退出的时候，
这时线程函数还持有局部变量的指针或引用。
#+BEGIN_SRC cpp
struct func
{
  int& i;
  func(int& i_) : i(i_) {}
  void operator() ()
  {
    for (unsigned j=0 ; j<1000000 ; ++j)
    {
      do_something(i); // 1. 潜在访问隐患：悬空引用
    }
  }
};
void oops()
{
    int some_local_state=0;
    func my_func(some_local_state);
    std::thread my_thread(my_func);
    my_thread.detach(); // 2. 不等待线程结束
} // 3. 新线程可能还在运行
#+END_SRC
这个例子中，已经决定不等待线程结束(使用了 =detach()= )，所以当 =oops()= 函数执行完成时
，新线程中的函数可能还在运行。如果线程还在运行，它就会去调用 =do_something(i)= 函数
，这时就会访问已经销毁的变量。如同一个单线程程序——允许在函数完成后继续持有局部
变量的指针或引用；当然，这从来就不是一个好主意——这种情况发生时，错误并不明显，
会使多线程更容易出错。

处理方法：

1. 使线程函数的功能齐全，将数据 *复制到线程中* ，而不是复制到 *共享数据* 中。
2. 使用 =join()=  函数来确保线程在函数完成前结束。
*** 1.2. 等待线程完成
1. =join()= 等待线程完成，只能使用一次，可使用 joinable() 检查是否已经调用。
2. 其他机制：条件变量和期待(futures)
3. =detach()= 用于分离线程，则表示不需等待线程。
4. 在 =join()= 之前线程异常，这次调用会被跳过。需在异常处理过程中调用 =join()= 避免生命周期问题。
#+BEGIN_SRC cpp
struct func; // 定义见前面
void f()
{
  int some_local_state=0;
  func my_func(some_local_state);
  std::thread t(my_func);
  try
  {
    do_something_in_current_thread();
  }
  catch(...)
  {
    t.join(); // 异常退出
    throw;
  }
  t.join(); // 正常退出
}
#+END_SRC
5. 使用资源获取即初始化(RAII)等待线程完成
#+BEGIN_SRC cpp
class thread_guard
{
  std::thread& t;
public:
  explicit thread_guard(std::thread& t_):t(t_){}
  ~thread_guard()
  {
    if(t.joinable()) // 1
    {
      t.join(); // 2
    }
  }
  thread_guard(thread_guard const&)=delete; // 3
  thread_guard& operator=(thread_guard const&)=delete;
};
struct func; // 定义在清单2.1中
void f()
{
  int some_local_state=0;
  func my_func(some_local_state);
  std::thread t(my_func);
  thread_guard g(t);
  do_something_in_current_thread();
} // 4
#+END_SRC
*** 1.3. 后台启动线程
1. =detach()= 让线程后台运行（即守护线程），线程退出时，相关资源能正确回收；后台线程的归属和控制C++运行库都会处理。
** 2. 向线程传递参数
1. 默认参数拷贝到线程独立内存中, 即使是引用也一样。
#+BEGIN_SRC cpp
void f(int i, std::string const& s);
std::thread t(f, 3, "hello");
#+END_SRC
2. 当参数对象需要隐式转化时，可能会在转换完成前崩溃，从而导致未定义行为。需要在构造线程之前转换。
#+BEGIN_SRC cpp
void f(int i,std::string const& s);
void not_oops(int some_param)
{
  char buffer[1024];
  sprintf(buffer,"%i",some_param);
  // std::thread t(f,3,"Hello World"); 可能出现未定义
  // std::thread t(f,3,buffer); 可能出现未定义
  std::thread t(f,3,std::string(buffer)); // 使用std::string，避免悬垂指针
  t.detach();
}
#+END_SRC
3. 期望传递引用，但复制了整个对象，导致无法更新引用的数据结构。=std::thread= 构造函数会无视期待的参数类型，只是拷贝变量。
所以传递给函数的参数是变量内部拷贝(已经拷贝到线程空间)的引用，而非数据本身的引用。可以使用 =std::ref= 将参数换成引用的形式
#+BEGIN_SRC cpp
void update_data_for_widget(widget_id w,widget_data& data); // 1
void oops_again(widget_id w)
{
  widget_data data;
  // std::thread t(update_data_for_widget,w,data); // 2
  std::thread t(update_data_for_widget,w,std::ref(data)); // 2
  display_status();
  t.join();
  process_widget_data(data); // 3
}
#+END_SRC
4. 传递一个成员函数作为线程函数，提供适合的对象指针作为第一个参数，后面可以接线程函数的参数。
#+BEGIN_SRC cpp
class X
{
  public:
  void do_lengthy_work(int);
};
X my_x;
int num(0);
std::thread t(&X::do_lengthy_work, &my_x, num);
#+END_SRC
5. 提供的参数可以移动，但不能复制。 =std::thread= 实例不像 =std::unique_ptr= 那样能占有一个动态对象的所有
权，但是它能占有其他资源：每个实例都负责管理一个执行线程(即线程函数)。执行线程的所有权可以在多个 =std::thread= 实例中
互相转移，依赖于 =std::thread= 的可移动且不可复制性。可复制保性证了在同一时间点，一个 std::thread 实例只能
关联一个执行线程；可移动性使得程序员可以自己决定，哪个实例拥有实际执行线程的所有权。
#+BEGIN_SRC cpp
void process_big_object(std::unique_ptr<big_object>);
std::unique_ptr<big_object> p(new big_object);
p->prepare_data(42);
std::thread t(process_big_object,std::move(p));
#+END_SRC
** 3. 转移线程所有权
实例：创建两个执行线程在三个实例(t1,t2,t3)之间转移所有权
#+BEGIN_SRC cpp
void some_function();
void some_other_function();
std::thread t1(some_function); // 1
std::thread t2=std::move(t1); // 显示移动
t1=std::thread(some_other_function); // 如果是临时对象，隐式移动
std::thread t3; // 4
t3=std::move(t2); // 5
t1=std::move(t3); // 6 赋值操作将使程序崩溃
#+END_SRC
1. =std::thread= 支持移动，意味着线程所有权可以在函数外进行转移。
#+BEGIN_SRC cpp
std::thread f()
{
  void some_function();
  return std::thread(some_function);
}
std::thread g()
{
  void some_other_function(int);
  std::thread t(some_other_function,42);
  return t;
}
#+END_SRC
2. 当所有权可以在函数内部传递，允许 =std::thread= 实例可作为参数进行传递。
#+BEGIN_SRC cpp
void f(std::thread t);
void g()
{
  void some_function();
  f(std::thread(some_function));
  std::thread t(some_function);
  f(std::move(t));
}
#+END_SRC
3. 支持移动的好处
   1. 可以创建 =thread_guard= 类的实例（前面定义过）
   2. 拥有线程的所有权

4. 使用 =scoped_thread= 类确保线程退出前完成
#+BEGIN_SRC cpp
class scoped_thread
{
  std::thread t;
public:
  explicit scoped_thread(std::thread t_): // 1
  t(std::move(t_))
  {
    if(!t.joinable()) // 2
      throw std::logic_error(“No thread”);
  }
  ~scoped_thread()
  {
    t.join(); // 3
  }
  scoped_thread(scoped_thread const&)=delete;
  scoped_thread& operator=(scoped_thread const&)=delete;
};
struct func; // 定义在清单2.1中
void f()
{
  int some_local_state;
  scoped_thread t(std::thread(func(some_local_state))); // 4
  do_something_in_current_thread();
} //
#+END_SRC
5. 量产线程
#+BEGIN_SRC cpp
void do_work(unsigned id);
void f()
{
  std::vector<std::thread> threads;
  for(unsigned i=0; i < 20; ++i)
  {
    threads.push_back(std::thread(do_work,i)); // 产生线程
  }
  std::for_each(threads.begin(),threads.end(),
                std::mem_fn(&std::thread::join)); // 对每个线程调用join()
                // std::mem_fn 类成员适配函数, 如果要传参必须用std::bind
}
#+END_SRC
** 4. 运行时决定线程数量
1. =std::thread::hardware_concurrency()= 返回同时在一个程序中并发的线程数量。
实例： =std::accumulate=
#+BEGIN_SRC cpp
template<typename Iterator,typename T>
struct accumulate_block
{
  void operator()(Iterator first,Iterator last,T& result)
  {
    result=std::accumulate(first,last,result);
  }
};
template<typename Iterator,typename T>
T parallel_accumulate(Iterator first,Iterator last,T init)
{
  unsigned long const length=std::distance(first,last);
  if(!length) // 1
    return init;
  unsigned long const min_per_thread=25;
  unsigned long const max_threads=(length+min_per_thread-1)/min_per_thread; // 2
  unsigned long const hardware_threads=std::thread::hardware_concurrency();
  unsigned long const num_threads=std::min(hardware_threads != 0 ? hardware_threads : 2, max_threads);
  unsigned long const block_size=length/num_threads; // 4
  std::vector<T> results(num_threads);
  std::vector<std::thread> threads(num_threads-1); // 5
  Iterator block_start=first;
  for(unsigned long i=0; i < (num_threads-1); ++i)
  {
    Iterator block_end=block_start;
    std::advance(block_end,block_size); // 6
    threads[i]=std::thread(accumulate_block<Iterator,T>(),block_start,block_end,std::ref(results[i]));
    block_start=block_end; // 8
  }
  accumulate_block<Iterator,T>()(block_start,last,results[num_threads-1]); // 9
  std::for_each(threads.begin(),threads.end(),std::mem_fn(&std::thread::join)); // 10
  return std::accumulate(results.begin(),results.end(),init); //11
}
#+END_SRC
** 5. 识别线程
1. 线程标识类型： =std::thread::id=
2. 调用对象成员函数 =get_id()= 获取线程id。
3. 调用 =std::this_thread::get_id()= 获取当前线程的id。

* 内存模型基础
** 1. 内存模型基础
- 四个原则：
  1. 每一个变量都是一个对象，包括作为其成员变量的对象。
  2. 每个对象至少占有一个内存位置。
  3. 基本类型都有确定的内存位置(无论类型大小如何，即使他们是相邻的，或是数组的一部分)。
  4. 相邻位域是相同内存中的一部分。
** 2. 原子类型
*** 2.1. 标准原子类型
1. 头文件： =<atomic>=
2. 成员函数： =is_lock_free= ，一般都会提供，查询原子类型操作直接用原子指令( =true= )还是锁 ( =false= )
3. =std::atomic_flag= , 类型不提供 =is_lock_free()= 成员函数; 简单的布尔标志，在这种类型上的操作都需要是无锁的
4. 标准原子类型是不能拷贝和赋值，他们没有拷贝构造函数和拷贝赋值操作。但是，因为可以隐式转化成对应的内置类型，所以这些类型依旧支持赋值
3. 操作
   - load()
   - store()
   - exchange()
   - compare_exchange_weak()
   - compare_exchange_strong()
6. 每个操作都有一个可选的内存排序参数用来指定所需存储的顺序, 默认是 =memory_order_seq_cst=
   - store：memory_order_relaxed, memory_order_release, memory_order_seq_cst
   - load: memory_order_relaxed, memory_order_consume, memory_order_acquire, memory_order_seq_cst
   - Read-modify-write: memory_order_relaxed, memory_order_consume, memory_order_acquire, memory_order_release, memory_order_acq_rel, memory_order_seq_cst
*** 2.2. std::atomic_flag
实例：实现自旋互斥锁
#+BEGIN_SRC cpp
class spinlock_mutex
{
  std::atomic_flag flag;
public:
  spinlock_mutex():flag(ATOMIC_FLAG_INIT){}
  void lock()
  {
    while(flag.test_and_set(std::memory_order_acquire));
  }
  void unlock()
  {
    flag.clear(std::memory_order_release);
  }
};
#+END_SRC
*** 2.3. std::atomic
1. std::atomic<bool> : 比 =std::atomic_flag= 更加齐全的布尔标志，可以被初始化为 =true= 或 =false=
#+BEGIN_SRC cpp
std::atomic<bool> b(true);
b=false;
#+END_SRC
2. 操作
#+BEGIN_SRC cpp
std::atomic<bool> b;
bool x=b.load(std::memory_order_acquire);
b.store(true);
x=b.exchange(false, std::memory_order_acq_rel);
#+END_SRC
3. 与 =std::atomic_flag= 比较
不是无锁的，需要内置一个互斥量。
*** 2.4. std::atomic 指针运算
1. 新的操作：
   - fetch_add(offset) : 将指针移动offset个位置并返回指向第一个元素的指针
   - fetch_sub()
   - +=, -+, ++, --

#+BEGIN_SRC cpp
class Foo{};
Foo some_array[3.;
std::atomic<Foo*> p(some_array);
Foo* x=p.fetch_add(2); // p加2，并返回原始值
assert(x==some_array);
assert(p.load()==&some_array[2]);
x=(p-=1); // p减1，并返回原始值
assert(x==&some_array[1]);
assert(p.load()==&some_array[1]);
#+END_SRC
*** 2.5. 原子整型
1. 新的操作：
   - fetch_and()
   - fetch_or()
   - fetch_xor()
   - &=, |=, ^=
*** 2.6. 主要类的模板
1. 成为原子变量的条件：
   - 必须有拷贝赋值运算符
   - 基类和非静态成员必须支持拷贝赋值操作
   - 必须是 *位可比* 的
** 3. 同步操作和强制排序
实例： 不同线程对数据的读写
#+BEGIN_SRC cpp
#include <vector>
#include <atomic>
#include <iostream>
std::vector<int> data;
std::atomic<bool> data_ready(false);
void reader_thread()
{
  while(!data_ready.load()) // 1
  {
    std::this_thread::sleep(std::milliseconds(1));
  }
  std::cout<<"The answer="<<data[0]<<"\m"; // 2
}
void writer_thread()
{
  data.push_back(42); // 3
  data_ready=true; // 4
}
#+END_SRC
*** 3.1. 同步发生
基本想法：在变量x进行适当标记的原子写操作W，同步与对x进行适当标记的
原子读操作，读取的是W操作写入的内容；或是在W之后，同一线程上的原子写操作对x写入
的值；亦或是任意线程对x的一系列原子读-改-写操作
*** 3.2. 先行发生
“先行发生”关系是一个程序中，基本构建块的操作顺序；它指定了某个操作去影响另一个操
作。
*** 3.3. 内存顺序
六个选项分三类：
1. 排序一致：memory_order_seq_sst
2. 获取-释放: memory_order_consume, memory_order_acquire, memory_order_release, memory_order_acq_rel
3. 自由序列: memory_order_relaxed

1. 排序一致队列
   程序中的行为从任意角度去看，序列顺序都保持一致。如果原子类型实例上的所有操作都是序列一致的，
那么一个多线程程序的行为，就以某种特殊的排序执行，好像单线程那样。
#+BEGIN_SRC cpp
#include <atomic>
#include <thread>
#include <assert.h>
std::atomic<bool> x,y;
std::atomic<int> z;
void write_x()
{
  x.store(true,std::memory_order_seq_cst); // 1
}
void write_y()
{
  y.store(true,std::memory_order_seq_cst); // 2
}
void read_x_then_y()
{
  while(!x.load(std::memory_order_seq_cst));
  if(y.load(std::memory_order_seq_cst)) // 3
  ++z;
}
void read_y_then_x()
{
  while(!y.load(std::memory_order_seq_cst));
  if(x.load(std::memory_order_seq_cst)) // 4
  ++z;
}
int main()
{
  x=false;
  y=false;
  z=0;
  std::thread a(write_x);
  std::thread b(write_y);
  std::thread c(read_x_then_y);
  std::thread d(read_y_then_x);
  a.join();
  b.join();
  c.join();
  d.join();
  assert(z.load()!=0); // 5
}
#+END_SRC
序列一致是最简单、直观的序列，但是他也是最昂贵的内存序列，因为它需要对所有线程进
行全局同步

2. 自由序列
在原子类型上的操作以自由序列执行，没有任何同步关系。在同一线程中对于同一变量的操
作还是服从先发执行的关系，但是这里不同线程几乎不需要相对的顺序。
#+BEGIN_SRC cpp
#include <atomic>
#include <thread>
#include <assert.h>
std::atomic<bool> x,y;
std::atomic<int> z;
void write_x_then_y(){
  x.store(true,std::memory_order_relaxed); //
  y.store(true,std::memory_order_relaxed); // 2
}
void read_y_then_x(){
  while(!y.load(std::memory_order_relaxed)); // 3
  if(x.load(std::memory_order_relaxed)) // 4
    ++z;
}
int main(){
  x=false;
  y=false;
  z=0;
  std::thread a(write_x_then_y);
  std::thread b(read_y_then_x);
  a.join();
  b.join();
  assert(z.load()!=0); //
}
#+END_SRC
非限制操作 -- 多线程
#+BEGIN_SRC cpp
#include <thread>
#include <atomic>
#include <iostream>
std::atomic<int> x(0),y(0),z(0); // 1
std::atomic<bool> go(false); // 2
unsigned const loop_count=10;
struct read_values
{
  int x,y,z;
};
read_values values1[loop_count];
read_values values2[loop_count];
read_values values3[loop_count];
read_values values4[loop_count];
read_values values3.loop_count];
void increment(std::atomic<int>* var_to_inc,read_values* values)
{
  while(!go)
    std::this_thread::yield(); // 3 自旋，等待信号
  for(unsigned i=0;i<loop_count;++i)
  {
    values[i].x=x.load(std::memory_order_relaxed);
    values[i].y=y.load(std::memory_order_relaxed);
    values[i].z=z.load(std::memory_order_relaxed);
    var_to_inc->store(i+1,std::memory_order_relaxed); // 4
    std::this_thread::yield();
  }
}
void read_vals(read_values* values)
{
  while(!go)
  std::this_thread::yield(); // 3.自旋，等待信号
  for(unsigned i=0;i<loop_count;++i)
  {
    values[i].x=x.load(std::memory_order_relaxed);
    values[i].y=y.load(std::memory_order_relaxed);
    values[i].z=z.load(std::memory_order_relaxed);
    std::this_thread::yield();
  }
}
void print(read_values* v)
{
  for(unsigned i=0;i<loop_count;++i)
  {
    if(i)
    std::cout<<",";
    std::cout<<"("<<v[i].x<<","<<v[i].y<<","<<v[i].z<<")";
  }
  std::cout<<std::endl;
}
int main()
{
  std::thread t1(increment,&x,values1);
  std::thread t2(increment,&y,values2);
  std::thread t3(increment,&z,values3);
  std::thread t4(read_vals,values4);
  std::thread t3.read_vals,values3.;
  go=true; // 6 开始执行主循环的信号
  t3.join();
  t4.join();
  t3.join();
  t2.join();
  t1.join();
  print(values1); // 7 打印最终结果
  print(values2);
  print(values3);
  print(values4);
  print(values3.;
}
#+END_SRC

3. 获取-释放内存模型
这个序列是自由序列(relaxed ordering)的加强版；虽然操作依旧没有统一的顺序，但是在这个
序列引入了同步。在这种序列模型中，原子加载就是获取(acquire)操作
(memory_order_acquire)，原子存储就是释放(memory_order_release)操作，原子读-改-写操
作(例如fetch_add()或exchange())在这里，不是“获取”，就是“释放”，或者两者兼有的操作
(memory_order_acq_rel), 这里，同步在线程释放和获取间是成对的(pairwise)。释放操作与
获取操作同步，这样就能读取已写入的值。这意味着不同线程看到的序列虽还是不同，但这
些序列都是受限的

#+BEGIN_SRC cpp
#include <atomic>
#include <thread>
#include <assert.h>
std::atomic<bool> x,y;
std::atomic<int> z;
void write_x()
{
  x.store(true,std::memory_order_release);
}
void write_y()
{
  y.store(true,std::memory_order_release);
}
void read_x_then_y()
{
  while(!x.load(std::memory_order_acquire));
  if(y.load(std::memory_order_acquire)) // 1
    ++z;
}
void read_y_then_x()
{
  while(!y.load(std::memory_order_acquire));
  if(x.load(std::memory_order_acquire)) // 2
    ++z;
}
int main()
{
  x=false;
  y=false;
  z=0;
  std::thread a(write_x);
  std::thread b(write_y);
  std::thread c(read_x_then_y);
  std::thread d(read_y_then_x);
  a.join();
  b.join();
  c.join();
  d.join();
  assert(z.load()!=0); // 3
}
#+END_SRC
*** 3.4. 栅栏
栅栏操作会对内存序列进行约束，
使其无法对任何数据进行修改，典型的做法是与使用memory_order_relaxed约束序的原子操
作一起使用。栅栏属于全局操作，执行栅栏操作可以影响到在线程中的其他原子操作。因为
这类操作就像画了一条任何代码都无法跨越的线一样，所以栅栏操作通常也被称为内存栅栏
(memory barriers)
#+BEGIN_SRC cpp
#include <atomic>
#include <thread>
#include <assert.h>
std::atomic<bool> x,y;
std::atomic<int> z;
void write_x_then_y()
{
  x.store(true,std::memory_order_relaxed); // 1
  std::atomic_thread_fence(std::memory_order_release); // 释放栅栏
  y.store(true,std::memory_order_relaxed); // 3
}
void read_y_then_x()
{
  while(!y.load(std::memory_order_relaxed)); // 4
  std::atomic_thread_fence(std::memory_order_acquire); // 添加栅栏
  if(x.load(std::memory_order_relaxed)) // 6
  ++z;
}
int main()
{
  x=false;
  y=false;
  z=0;
  std::thread a(write_x_then_y);
  std::thread b(read_y_then_x);
  a.join();
  b.join();
  assert(z.load()!=0); // 7
}
#+END_SRC
*** 3.3.原子操作对非原子的操作排序
#+BEGIN_SRC cpp
#include <atomic>
#include <thread>
#include <assert.h>
bool x=false; // x现在是一个非原子变量
std::atomic<bool> y;
std::atomic<int> z;
void write_x_then_y()
{
  x=true; // 1 在栅栏前存储x
  std::atomic_thread_fence(std::memory_order_release);
  y.store(true,std::memory_order_relaxed); // 2 在栅栏后存储y
}
void read_y_then_x()
{
  while(!y.load(std::memory_order_relaxed)); // 3 在#2写入前，持续等待
  std::atomic_thread_fence(std::memory_order_acquire);
  if(x) // 4 这里读取到的值，是#1中写入
  ++z;
}
int main()
{
  x=false;
  y=false;
  z=0;
  std::thread a(write_x_then_y);
  std::thread b(read_y_then_x);
  a.join();
  b.join();
  assert(z.load()!=0); // 3.断言将不会触发
}
#+END_SRC
